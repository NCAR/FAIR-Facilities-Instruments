View(cleaned_census)
cleaned_census<-census_data_edited %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from=rowname, values_from=value)
View(cleaned_census)
Vie(co_county_summary)
View(co_county_summary)
View(cleaned_census)
library(reticulate)
use_python("/Users/adra7980/.virtualenvs/rgee/bin/python")
use_python("/Users/adra7980/.virtualenvs/rgee/bin/python", required = TRUE)
library(rgee)
ee_Initialize()
createTimeBand <-function(img) {
year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)
ee$Image(year)$byte()$addBands(img)
}
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
ee_print(col_reduce)
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
installed.packages("geojsonio")
install.packages("geojsonio")
library(geojsonio)
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(0.18, 20, -0.18)
),
name = "stable lights trend"
)
library(reticulate)
library(rgee)
library(rgee)
use_python("/Users/adra7980/.virtualenvs/rgee/bin/python", required = TRUE)
library(rgee)
library(rgee)
ee_Initialize()
library(reticulate)
library(rgee)
library(tidyverse)
library(gapminder)
library(sf)
library(tmap)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
gapminder_dataset<-gapminder
gapminder_dataset<-full_join(gapminder_dataset, country_codes, by="country")
# country boundaries
country_boundaries<-ne_countries(scale="medium", returnclass="sf")
# Join country boundaries and gapminder
country_boundaries_gapminder<-full_join(country_boundaries,gapminder_dataset,
by=c("iso_a3"="iso_alpha"))
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent.x) %>%
nest()
gapminder_nested_spatial
View(gapminder_nested_spatial)
gapminder_nested_spatial<-gapminder_nested_spatial %>% filter(continent.x=="Asia"|
continent.x=="Africa"|
continent.x=="Europe")
gapminder_nested_spatial
View(gapminder_nested_spatial)
gapminder_dataset<-gapminder
gapminder_nested<-gapminder_dataset %>%
group_by(continent) %>%
nest()
gapminder_nested
View(gapminder_nested)
View(gapminder_nested[[2]][[1]])
4+4
View(country_boundaries)
gapminder_nested<-gapminder_dataset %>%
group_by(continent) %>%
nest()
country_boundaries$continent
# country boundaries
country_boundaries<-ne_countries(scale="medium", returnclass="sf") %>% select(iso_a3, geometry)
View(country_boundaries)
# Join country boundaries and gapminder
country_boundaries_gapminder<-full_join(country_boundaries,gapminder_dataset,
by=c("iso_a3"="iso_alpha"))
View(gapminder_dataset)
gapminder_dataset<-full_join(gapminder_dataset, country_codes, by="country")
# Join country boundaries and gapminder
country_boundaries_gapminder<-full_join(country_boundaries,gapminder_dataset,
by=c("iso_a3"="iso_alpha"))
View(country_boundaries_gapminder)
tm_shape(country_boundaries_gapminder)+tm_polygons()
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest()
View(gapminder_nested_spatial)
View(gapminder_nested)
View(gapminder_nested_spatial)
View(gapminder_nested)
View(gapminder_nested_spatial[[2]][[2]])
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest()
View(gapminder_nested_spatial)
View(gapminder_nested_spatial)
x
d
re
library(gapminder)
library(sf)
library(tmap)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
gapminder_dataset<-gapminder
gapminder_dataset<-full_join(gapminder_dataset, country_codes, by="country")
# country boundaries
country_boundaries<-ne_countries(scale="medium", returnclass="sf") %>% select(iso_a3, geometry)
# Join country boundaries and gapminder
country_boundaries_gapminder<-full_join(country_boundaries,gapminder_dataset,
by=c("iso_a3"="iso_alpha"))
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest()
gapminder_nested_spatial
View(gapminder_nested_spatial)
d
View(gapminder_nested_spatial[[2]][[1]])
View(gapminder_nested_spatial[[2]][[2]])
View(gapminder_nested_spatial)
5+5
3+2
View(gapminder_nested_spatial[[2]][[1]])
View(gapminder_nested_spatial[[2]][[1]])
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest() %>%
filter(continent=="Asia"|continent=="Africa"|continent=="Europe")
gapminder_nested_spatial
View(gapminder_nested_spatial)
View(gapminder_nested_spatial[[2]][[1]])
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest() %>%
filter(continent=="Asia"|continent=="Africa"|continent=="Europe")
View(gapminder_nested_spatial[[2]][[1]])
s
View(gapminder_nested_spatial)
test<-gountry_boundaries_gapminder %>% -select(geometry)
test<-country_boundaries_gapminder %>% -select(geometry)
View(country_boundaries_gapminder)
test<-country_boundaries_gapminder %>% select(-geometry)
testing<-test %>% group_by(continent) %>% nest()
testing
View(testing)
View(testing[[2]][[2]])
test
test<-country_boundaries_gapminder %>% select(-geometry)
test
test<-country_boundaries_gapminder %>% -select(geometry)
test<-country_boundaries_gapminder %>% select(-pop)
test
test<-country_boundaries_gapminder %>% select(-geometry)
test
test<-country_boundaries_gapminder %>% select(iso_a3, country, continent, year, lifeExp, pop)
test
test<-gapminder_dataset %>% group_by(continent) %>% nest()
View(test)
gapminder %>% group_by(continent) %>% nest()
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest() %>%
filter(continent=="Asia"|continent=="Africa"|continent=="Europe")
View(gapminder_nested_spatial)
View(gapminder_nested_spatial[[2]][[1]])
View(gapminder_nested_spatial[[2]][[2]])
View(gapminder_nested_spatial[[2]][[3]])
View(gapminder_nested_spatial[[3]][[2]])
View(gapminder_nested_spatial[[2]][[3]])
View(gapminder_nested_spatial[[1]][[1]])
View(gapminder_nested_spatial[[2]][[1]])
gapminder_nested_spatial
View(gapminder_nested_spatial[[2]][[2]])
gapminder_nested_spatial %>% pull(data) %>% pluck(1)
asia<-gapminder_nested_spatial %>% pull(data) %>% pluck(1)
asia
test<-asia %>% tm_shape(lifeExp)+tm_polygons()
test<-asia %>% tm_shape("lifeExp")+tm_polygons()
test
test<-tm_shape(asia)+tm_polygons(column="lifeExp")
test
test<-tm_shape(asia)+
tm_polygons(column="lifeExp", palette="BuGn")
test
test<-tm_shape(asia)+
tm_polygons(col="lifeExp", palette="BuGn")
test
spatial_viz_list<-function(dataset){
continent_map<-tm_shape(data)+
tm_polygons(col="lifeExp", palette="BuGn")
}
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(lifeExp_viz=map(spatial_viz_list))
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(lifeExp_viz=map(data,spatial_viz_list))
gapminder_nested_spatial
gapminder_nested_spatial %>% pull(lifeExp_viz) %>% pluck(2)
View(gapminder_nested_spatial)
View(gapminder_nested_spatial[[3]][[1]])
gapminder_nested_spatial[[3]][[1]]
gapminder_nested_spatial %>% pull(2)
spatial_viz_list<-function(dataset){
continent_map<-tm_shape(dataset)+
tm_polygons(col="lifeExp", palette="BuGn")
}
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(lifeExp_viz=map(data,spatial_viz_list))
gapminder_nested_spatial
gapminder_nested_spatial %>% pull(3) %>% pluck(1)
gapminder_nested_spatial %>% pull(3) %>% pluck(2)
gapminder_nested_spatial<-country_boundaries_gapminder %>%
group_by(continent) %>%
nest() %>%
filter(continent=="Asia"|continent=="Africa"|continent=="Europe")
gapminder_nested_spatial %>% pull(2)
spatial_viz_list_update<-function(dataset){
lifeExp_map<-tm_shape(dataset)+
tm_polygons(col="lifeExp", palette="BuGn")
pop_map<-tm_shape(dataset)+
tm_polygons(col="pop", palette="BuGn")
gdpPercapmap<-tm_shape(dataset)+
tm_polygons(col="gdpPercap", palette="BuGn")
return(lifeExp_map, pop_map, gdpPercapmap)
}
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(lifeExp_viz=map(data,spatial_viz_list_update))
spatial_viz_list_update<-function(dataset){
lifeExp_map<-tm_shape(dataset)+
tm_polygons(col="lifeExp", palette="BuGn")
pop_map<-tm_shape(dataset)+
tm_polygons(col="pop", palette="BuGn")
gdpPercapmap<-tm_shape(dataset)+
tm_polygons(col="gdpPercap", palette="BuGn")
returnlist<-list(lifeExp_map, pop_map, gdpPercapmap)
return(returnlist)
}
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(lifeExp_viz=map(data,spatial_viz_list_update))
gapminder_nested_spatial
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(gapmindermaps=map(data,spatial_viz_list_update))
gapminder_nested_spatial
gapminder_nested_spatial %>% pull(4) %>% pluck(1)
View(gapminder_nested_spatial)
gapminder_nested_spatial %>% pull(4) %>% pluck(1,1)
stop
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(gapmindermaps=map(data,spatial_viz_list_update))
gapminder_nested_spatial %>% pull(4) %>% pluck(1,1)
gapminder_nested_spatial %>% pull(4) %>% pluck(1,2)
gapminder_nested_spatial %>% pull(4) %>% pluck(1,1)
4+$
3+3
gapminder_nested_spatial %>% pull(4)
gapminder_nested_spatial
spatial_viz_list_update
spatial_viz_list_update<-function(dataset){
lifeExp_map<-tm_shape(dataset)+
tm_polygons(col="lifeExp", palette="BuGn")
pop_map<-tm_shape(dataset)+
tm_polygons(col="pop", palette="BuGn")
gdpPercapmap<-tm_shape(dataset)+
tm_polygons(col="gdpPercap", palette="BuGn")
returnlist<-list(lifeExp_map, pop_map, gdpPercapmap)
return(returnlist)
}
gapminder_nested_spatial<-gapminder_nested_spatial %>%
mutate(gapmindermaps=map(data,spatial_viz_list_update))
gapminder_nested_spatial
gapminder_nested_spatial %>% pull(4) %>% pluck(2)
gapminder_nested_spatial %>% pull(4) %>% pluck(2,1)
gapminder_nested_spatial %>% pull(4) %>% pluck(2,2)
gapminder_nested_spatial %>% pull(4) %>% pluck(2,3)
knitr::opts_chunk$set(echo = TRUE)
gapminder_nested_spatial_two %>% pull(3)
spatial_viz_list_update<-function(dataset){
lifeExp_map<-tm_shape(dataset)+
tm_polygons(col="lifeExp", palette="BuGn")
pop_map<-tm_shape(dataset)+
tm_polygons(col="pop", palette="BuGn")
gdpPercapmap<-tm_shape(dataset)+
tm_polygons(col="gdpPercap", palette="BuGn")
returnlist<-list(lifeExp_map, pop_map, gdpPercapmap)
return(returnlist)
}
gapminder_nested_spatial_two<-gapminder_nested_spatial %>%
mutate(gapmindermaps=map(data,spatial_viz_list_update))
library(tidyverse)
library(gapminder)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(tmap)
gapminder_dataset<-gapminder
spatial_viz_list_update<-function(dataset){
lifeExp_map<-tm_shape(dataset)+
tm_polygons(col="lifeExp", palette="BuGn")
pop_map<-tm_shape(dataset)+
tm_polygons(col="pop", palette="BuGn")
gdpPercapmap<-tm_shape(dataset)+
tm_polygons(col="gdpPercap", palette="BuGn")
returnlist<-list(lifeExp_map, pop_map, gdpPercapmap)
return(returnlist)
}
gapminder_nested_spatial_two<-gapminder_nested_spatial %>%
mutate(gapmindermaps=map(data,spatial_viz_list_update))
install.packages("caret")
library(caret)
library(raster)
library(rgdal)
library(rgeos)
library(gdalUtils)
library(sp)
library(sf)
library(leaflet)
library(mapview)
library(caret)
library(googledrive)
# load world's elevation from SRTM
srtm<-ee$Image("USGS/SRTMGL1_003")
library(rgee)
ee_Initialize()
library(rgee)
ee_Initialize()
library(rgee)
ee_Initialize()
ee_install()
ee_clean_pyenv()
library(rgee)
ee_install()
library(rgee)
ee_Initialize()
ee_install()
library(rgee)
ee_Initialize()
# load world's elevation from SRTM
srtm<-ee$Image("USGS/SRTMGL1_003")
srtm
# check metadata
ee_print(srtm)
library(rgee)
library(rgee)
library(rgee)
library(rgee)
# Load Libraries
library(tidyverse)
library(psych)
library(fastDummies)
library(janitor)
# Creates a dummy country-level data frame
country_df<-data.frame(Country=c("Country A", "Country B", "Country C"),
GDP=c(8000, 30000, 23500),
Population=c(2000, 5400, 10000),
Continent=c("South America", "Europe", "North America"))
View(country_df)
# Creates a dummy country-level data frame
country_df<-data.frame(Country=c("Country A", "Country B", "Country C"),
GDP=c(8000, 30000, 23500),
Population=c(2000, 5400, 10000),
Continent=c("South America", "Europe", "North America"))
# pulls up "country_df" data frame in R Studio data viewer
View(country_df)
arbitrary_values
#VECTORS
# makes vector with values 5,7,55,32
c(5, 7, 55, 32)
# assigns vector of arbitrary values to new object named "arbitrary_values"
arbitrary_values<-c(5,7,55.6,32.5)
# prints vector assigned to "arbitrary_values" object
arbitrary_values
# creates a new vector that doubles the values in "arbitrary_values" and assigns it to a new object named
"arbitrary_values_2x"
arbitrary_values_2x<-arbitrary_values*2
# prints contents of "arbitrary_values_2x"
arbitrary_values_2x
# adds "arbitrary_values" vector and "arbitrary_values_2x" vector
arbitrary_values + arbitrary_values_2x
# extracts third element of "arbitrary_values_2x" vector
arbitrary_values[3]
# extracts a new vector comprised of the 2nd, 3rd, and 4th elements of the existing "arbitrary_values" vector
arbitrary_values[2:4]
# creates character vector whose elements are the first four months of the year, and assigns the vector to a new object named "months_four"
months_four<-c("January", "February", "March", "April")
# prints contents of "months_four"
months_four
# extracts second element of "months_four" object (i.e. the "February" string)
months_four[2]
# subsets the second and third elements of "months_four" object (i.e. the "February" and "March" strings, which are extracted as a new character vector)
months_four[2:3]
# Data Frames
# Creates a dummy country-level data frame
country_df<-data.frame(Country=c("Country A", "Country B", "Country C"),
GDP=c(8000, 30000, 23500),
Population=c(2000, 5400, 10000),
Continent=c("South America", "Europe", "North America"))
# prints "country_df" data frame to console
country_df
# pulls up "country_df" data frame in R Studio data viewer
View(country_df)
# LISTS
# creates list whose elements are the "arbitrary_values" numeric vector,
# the "months_four" character vector, and the "country_df" data frame,
# and assigns it to a new object named "example_list"
example_list<-list(arbitrary_values, months_four, country_df)
arbitrary_values
months_four
country_df
example_list
# extracts country-level data frame from "example_list"; the country-level data frame is
# the third element in "example_list"
example_list[[3]]
# extracts the first and third elements from "example_list"
example_list[c(1,3)]
# print the data structure of the "example_list" object
class(example_list)
# print the data structure of the "arbitrary_values" object
class(arbitrary_values)
# Reads in PT dataset from dropbox and assigns it to a new object named "pt_cloud"
pt_cloud<-read_csv("https://www.dropbox.com/s/iczslf52s8bzku2/persson_tabellini_workshop.csv?dl=1")
View(pt_cloud)
pt_copy<-pt_cloud
# Generate summary statistics for "pt_copy" and assign to new object named "pt_copy_summarystats1"
pt_copy_summarystats1<-describe(pt_copy)
# View contents of "pt_copy_summarystats1" in data viewer
View(pt_copy_summarystats1)
# Creates summary statistics for each continent grouping, and puts results in list named "summary_stats_by_continent"
summary_stats_by_continent<-describeBy(pt_copy, pt_copy$continent)
# Accessing continent-level summary statistics for africa from the "summary_stats_by_continent" list
summary_stats_by_continent[["africa"]]
pt_copy
View(pt_copy)
View(pt_copy %>% relocate(continent))
# Group-level summary statistics can be assigned to their own object for easy retrieval
africa_summary<-summary_stats_by_continent[["africa"]]
View(africa_summary)
# Generate a table that displays summary statistics for trade at the continent level and assign to object named "trade_age_by_continent"
trade_age_by_continent<-pt_copy %>% group_by(continent) %>%
summarise(meanTrade=mean(trade),sdTrade=sd(trade),
meanAge=mean(age), sdAge=sd(age),
n=n())
View(trade_age_by_continent)
# Creates cross-tab showing the breakdown of federal/non federal across continents
crosstab_federal_continent<-pt_copy %>% tabyl(federal, continent)
View(crosstab_federal_continent)
# bring the "country" column to the front of the dataset
pt_copy<-pt_copy %>% relocate(country)
# View "pt_copy"
View(pt_copy)
?relocate
# bring the "country", "list", "trade", "oecd" columns to the front of the dataset
pt_copy<-pt_copy %>% relocate(country, list, trade, oecd)
View(pt_copy)
## Renaming a variable (renames "list" to "party_list")
pt_copy<-pt_copy %>% rename(party_list=list)
View(pt_copy)
relocate(pt_copy, party_list)
relocate(pt_copy, party_list)
# sorting in descending (high to low) order with respect to the "trade" variable
pt_copy<-pt_copy %>% arrange(desc(trade))
View(pt_copy)
# Create new variable named "non_catholic_80" that is calculated by substracting the
# Catholic share of the population in 1980 ("catho80") from 100  and relocates
# "country", "catho80", and the newly created "non_catholic_80" to the front of the dataset
pt_copy<-pt_copy %>% mutate(non_catholic_80=100-catho80) %>%
relocate(country, catho80, non_catholic_80)
View(pt_copy)
# Create new variable named "non_catholic_80" that is calculated by substracting the
# Catholic share of the population in 1980 ("catho80") from 100  and relocates
# "country", "catho80", and the newly created "non_catholic_80" to the front of the dataset
pt_copy<-pt_copy %>% mutate(non_catholic_80=100-catho80) %>%
relocate(country, catho80, non_catholic_80)
View(pt_copy)
# Selects "country", "cgexp", "cgrev", and "trade" variables from the "pt_copy"
# dataset and assigns the selection to a new object named "pt_copy_selection"
pt_copy_selection<-pt_copy %>% select(country, cgexp, cgrev, trade, federal)
View(pt_copy_selection)
sans_federal<-pt_copy_selection %>% select(-federal)
View(sans_federal)
2+2
r<-6
r
/Users/adra7980/Documents/crdds_git/data_bootcamp_spring2023/content/data-analysis-in-R/nordstrom_R.pdf
as.logical(5)
74014+15200+21200+25000
135414-14081
setwd("~/Documents/ncar_git/FAIR-Facilities-Instruments")
6+2+2+2+2+2+2+2+2+2
24+14
3478/12
3243/12
50+57+70+15
50+70+15
